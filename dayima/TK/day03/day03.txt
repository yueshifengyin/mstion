day02回顾:
两种布局:
  pack
  grid

pack
  side 上下左右tkinter.LEFT...
  fill 填充 NONE, X, Y, BOTH
  expand 扩展 1 / 0(默认)
    如果expand=1时，大部控件的side将无效
  ipadx/ipady 内边距
  padx/pady   外边距

grid
  row    行
  column 列
  padx/pady  ...
  ipadx/ipady ..
  rowspan  跨越行数
  columnspan 跨越列数
  stick  粘滞方向
       N S E W

Frame 



day03笔记:
LabelFrame 控件
  和Frame一样，查多了一个text属性

示例：
　　01_labelframe.py


RadioButton 控件
  作用：
  　　从多个选项中选择其中的一个
  属性:
    text      显示文字信息
    value     此控件代表的值
    variable  此控件绑定的 IntVar对象
    command   回调函数

示例:
  见：02_radiobutton.py

tkinter的变量类型：
  IntVar      整数变量
  StringVar   字符串变量
  DoubleVar   浮点变量
  BooleanVar  布尔变量
方法:
  get()       获取相应的值
  set(value)  设置相应的值
属性:
  value  设置初始值

Scale控件:
  属性:
    from_ 起始整数值
    to    终止值(包含)
    orient  方向 HORIZONTAL(水平) , VERTICAL(竖直)
    command 值变化过程回调函数
    variable 绑定变量 IntVar
  方法:
    get()　      获取值
    set(value)  设置值
  command 回调(callback)函数:
    def xxxx(v):  # v代表当前的值
        ....

示例：
　　04_scale.py

Spinbox 控件
  属性:
    from_   整数起始值
    to      整数终止值(包含)
    increment  增加／减少的值
  方法:
    get()        ...略

示例见:
  05_spinbox.py


text 控件:
  作用：
    用于显示和书写多行文本
  方法：
    insert(index, 文字内容的字符串)
  属性:
    width  宽(以字符宽度为单位)
    height 高(以文字的行为单位)

示例见:
  06_text.py



事件 event
  事件是鼠标，键盘等对窗口发出的指令

事件的来源：
  鼠标，键盘，定时器和其它系统事件

事件的绑定方法:
  bind(事件类型，事件处理函数)

事件处理函数的定义方法:
  def xxxx(event):
      pass
  注： event为事件

常用事件字符串:
  '<Button>'    鼠标的全部按键按下
  '<Button-1>' 鼠标的左键按下,2,3为中间键和右键
  '<ButtonRelease>' 鼠标的全部按键抬起
  '<ButtonRelease-1>' 右键抬起
  '<Key>' 或 '<KeyPress>' 全部的键盘按键按下
  '<Key-a>'    'a'键按下
  '<KeyRelease>'  全部按键抬起
  '<KeyRelease-a>' 'a'键抬起
  '<Key-Left>'     左方向键按下
  '<F1>'           F1键按下
  '<Control-v>'    Ctrl+v
  ....

事件 event 的属性
  type    事件类型
  ---------以下为键盘事件的属性-------
  keycode  键盘的代码（操作系统级别的编码)
  keysym   按键的符号名称(字符串)
  keysym_num 按键对应的ASCII值
  char       按键对应的字符(字符串)
  ---------以下为鼠标事件的属性
  x,y    鼠标相对于窗口控件的位置（像素)
  x_root, y_root, 鼠标相对于屏幕左上解的绝对位置（像素)
  num,    按扭的编号


定时器
  每一个窗口控件都可以设置一个或多定时器

  方法:
    after(延时毫秒数, 定时器回调函数)
      作用：
        启动一个定时器,返回一个代表此定时器的整数
    after_cancel(定时器id)
      作用：
        取消一个已经启动的定时器
      注: 定时器id为after返回的值

  示例见:
    09_timer.py






